{"version":3,"sources":["helpers/dataProvider.js","helpers/ra-data-rest-hapi-fixed.js","helpers/authProvider.js","components/App.js","serviceWorker.js","index.js"],"names":["requestHandler","dataProvider","apiUrl","httpClient","arguments","length","undefined","fetchUtils","fetchJson","getQueryForParams","params","_params$pagination","pagination","page","perPage","_params$sort","sort","field","order","filter","$sort","q","$term","Object","assign","flattenObject","$limit","$page","cleanData","clean","data","id","createdAt","updatedAt","deletedAt","isDeleted","JSON","stringify","type","resource","UPDATE_MANY","Promise","all","ids","map","concat","method","body","then","responses","response","json","DELETE_MANY","_convertDataRequestTo","url","options","GET_LIST","query","GET_ONE","GET_MANY_REFERENCE","target","UPDATE","CREATE","DELETE","GET_MANY","_id","join","Error","convertDataRequestToHTTP","console","log","docs","d","total","items","convertHTTPResponse","restHapiProvider","headers","Headers","Accept","token","localStorage","getItem","set","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","stop","_x","_x2","_x3","apply","this","window","location","protocol","hostname","port","authProvider","AUTH_LOGIN","username","password","request","Request","Content-Type","fetch","status","statusText","setItem","AUTH_LOGOUT","removeItem","resolve","AUTH_ERROR","reject","AUTH_CHECK","EntryForm","react_default","createElement","SimpleForm","TextInput","source","LongTextInput","EntryEdit","props","Edit","EntryCreate","Create","EntryList","List","Datagrid","rowClick","TextField","FilterForm","FilterEdit","FilterCreate","FilterList","TranslationForm","TranslationEdit","TranslationCreate","App","Admin","Resource","name","list","edit","create","ListGuesser","Boolean","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d7b5f8c.chunk.js","sourcesContent":["import { fetchUtils } from 'react-admin';\n\nimport restHapiProvider from './ra-data-rest-hapi-fixed.js';\n\nconst apiUrl = \"/api\";\n\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({ Accept: 'application/json' });\n    }\n    const token = localStorage.getItem('token');\n    options.headers.set('authorization', `${token}`);\n    return fetchUtils.fetchJson(url, options);\n}\n\nconst extendDataProvider = requestHandler => async (type, resource, params) => {\n\n    console.log(type, resource, params);\n\n    // for other request types and resources, fall back to the default request handler\n    return requestHandler(type, resource, params);\n};\n\nconst dataProvider = extendDataProvider(restHapiProvider(apiUrl, httpClient));\n\nexport { dataProvider }\n\n\n\n","import { stringify } from 'query-string'\nimport {\n  fetchUtils,\n  GET_LIST,\n  GET_ONE,\n  GET_MANY,\n  GET_MANY_REFERENCE,\n  CREATE,\n  UPDATE,\n  UPDATE_MANY,\n  DELETE,\n  DELETE_MANY\n} from 'react-admin'\n\n/**\n * Maps admin-on-rest queries to a rest-hapi powered REST API\n *\n * @see https://github.com/JKHeadley/rest-hapi\n * @example\n * GET_LIST     => GET http://my.api.url/posts?$sort=title&$limit=24&$page=1\n * GET_ONE      => GET http://my.api.url/posts/123\n * GET_MANY     => GET http://my.api.url/posts/123, GET http://my.api.url/posts/456, GET http://my.api.url/posts/789\n * UPDATE       => PUT http://my.api.url/posts/123\n * CREATE       => POST http://my.api.url/posts/123\n * DELETE       => DELETE http://my.api.url/posts/123\n */\nexport default (apiUrl, httpClient = fetchUtils.fetchJson) => {\n  const getQueryForParams = (params) => {\n    const { page, perPage } = params.pagination\n    const { field, order } = params.sort\n    if (field) {\n      params.filter.$sort = (order === 'DESC' ? '-' : '') + field\n      /* A set of fields to sort by.\n      Including field name indicates it should be sorted ascending, while prepending '-' indicates descending.\n      The default sort direction is 'ascending' (lowest value to highest value).\n      Listing multiplefields prioritizes the sort starting with the first field listed */\n    }\n    if (params.filter.q != null) {\n      params.filter.$term = params.filter.q\n      delete params.filter.q\n    }\n    return Object.assign(\n      fetchUtils.flattenObject(params.filter), // add filter as is, e.g. name=john\n      {$limit: perPage, $page: page}, // pagination\n      /* Rest-Hapi docs:\n      A set of fields to sort by.\n      Including field name indicates it should be sorted ascending, while prepending '-' indicates descending.\n      The default sort direction is 'ascending' (lowest value to highest value).\n      Listing multiplefields prioritizes the sort starting with the first field listed */\n      field ? {$sort: (order === 'DESC' ? '-' : '') + (field === 'id' ? '_id' : field)} : {} // optional field sort\n    )\n  }\n\n  const cleanData = (params) => {\n    const clean = Object.assign({}, params.data)\n    delete clean.id\n    delete clean.createdAt\n    delete clean.updatedAt\n    delete clean.deletedAt\n    delete clean.isDeleted\n    return JSON.stringify(clean)\n  }\n\n  /**\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params The data request params, depending on the type\n     * @returns {Object} { url, options } The HTTP request parameters\n     */\n  const convertDataRequestToHTTP = (type, resource, params) => {\n    let url = ''\n    const options = {}\n    switch (type) {\n      case GET_LIST: {\n        const query = getQueryForParams(params)\n        url = `${apiUrl}/${resource}?${stringify(query)}`\n        break\n      }\n      case GET_ONE:\n        url = `${apiUrl}/${resource}/${params.id}`\n        break\n      case GET_MANY_REFERENCE: {\n        const query = getQueryForParams(params)\n        query[params.target] = params.id\n        url = `${apiUrl}/${resource}?${stringify(query)}`\n        break\n      }\n      case UPDATE:\n        url = `${apiUrl}/${resource}/${params.id}`\n        options.method = 'PUT'\n        options.body = cleanData(params)\n        break\n      case CREATE:\n        url = `${apiUrl}/${resource}`\n        options.method = 'POST'\n        options.body = cleanData(params)\n        break\n      case DELETE:\n        url = `${apiUrl}/${resource}/${params.id}`\n        options.method = 'DELETE'\n        break\n      case GET_MANY: {\n        url = `${apiUrl}/${resource}?${params.ids.map(_id => stringify({_id})).join('&')}`\n        break\n      }\n      default:\n        throw new Error(`Unsupported fetch action type ${type}`)\n    }\n    return { url, options }\n  }\n\n  /**\n     * @param {Object} response HTTP response from fetch()\n     * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params The data request params, depending on the type\n     * @returns {Object} Data response\n     */\n  const convertHTTPResponse = (response, type, resource, params) => {\n    console.log(type, resource, params);\n    const { json } = response\n    switch (type) {\n      case GET_LIST:\n      case GET_MANY:\n      case GET_MANY_REFERENCE:\n        return {\n          data: json.docs.map(d => (d.id = d._id) && delete d._id && d),\n          total: json.items.total\n        }\n      case CREATE:\n        params.data.id = params.data._id\n        delete params.data._id\n        return { data: params.data }\n      \n      /* modified seb */\n      case DELETE: \n        return { data: params }\n      default:\n        if(json) {\n          json.id = json._id\n          delete json._id\n          return { data: json }\n        } else {\n          return { data: {} }\n        }\n    }\n  }\n\n  /**\n     * @param {string} type Request type, e.g GET_LIST\n     * @param {string} resource Resource name, e.g. \"posts\"\n     * @param {Object} payload Request parameters. Depends on the request type\n     * @returns {Promise} the Promise for a data response\n     */\n  return (type, resource, params) => {\n    // json-server doesn't handle filters on UPDATE route, so we fallback to calling UPDATE n times instead\n    if (type === UPDATE_MANY) {\n      return Promise.all(\n        params.ids.map(id =>\n          httpClient(`${apiUrl}/${resource}/${id}`, {\n            method: 'PATCH',\n            body: JSON.stringify(params.data)\n          })\n        )\n      ).then(responses => ({\n        data: responses.map(response => response.json)\n      }))\n    }\n    // json-server doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n    if (type === DELETE_MANY) {\n      return Promise.all(\n        params.ids.map(id =>\n          httpClient(`${apiUrl}/${resource}/${id}`, {\n            method: 'DELETE'\n          })\n        )\n      ).then(responses => ({\n        data: responses.map(response => response.json)\n      }))\n    }\n    const { url, options } = convertDataRequestToHTTP(\n      type,\n      resource,\n      params\n    )\n    return httpClient(url, options).then(response =>\n      convertHTTPResponse(response, type, resource, params)\n    )\n  }\n}\n","// in src/authProvider.js\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\n\nconst apiUrl = window.location.protocol + \"//\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + \"/api\";\n\nexport default (type, params) => {\n    if (type === AUTH_LOGIN) {\n        const { username, password } = params;\n        const request = new Request(apiUrl + '/login', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        })\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(({ token }) => {\n                localStorage.setItem('token', token);\n            });\n    }\n    if (type === AUTH_LOGOUT) {\n        localStorage.removeItem('token');\n        return Promise.resolve();\n    }\n    \n    if (type === AUTH_ERROR) {\n        const status  = params.status;\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('token');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    }\n\n    if (type === AUTH_CHECK) {\n      console.log(\"auth check\", localStorage.getItem('token'));\n      return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n    }\n\n\n    return Promise.reject('Unknown method');\n}","import React from 'react';\nimport { \n  Admin, \n  DeleteButton, \n  Resource, \n  ListGuesser, \n  List, \n  Datagrid, \n  Edit, \n  Create, \n  SimpleForm, \n  TextInput, \n  TextField, \n  Toolbar, \n  FileInput, \n  FileField,\n  ReferenceInput,\n  SelectInput,\n  LongTextInput,\n  BooleanInput   \n} from 'react-admin';\n\nimport { dataProvider } from '../helpers/dataProvider.js';\nimport authProvider from '../helpers/authProvider';\n\nconst EntryForm = \n    <SimpleForm>\n        <TextInput source=\"musician\" />\n        <TextInput source=\"city\" />\n        <TextInput source=\"year\" />\n        <LongTextInput source=\"note\" />\n    </SimpleForm>\nconst EntryEdit = props => <Edit {...props}>{EntryForm}</Edit>;\nconst EntryCreate = props => <Create {...props}>{EntryForm}</Create>;\n\nconst EntryList = props =>\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n        <TextField source=\"musician\" />\n        <TextField source=\"city\" />\n        <TextField source=\"year\" />\n        <TextField source=\"user_id\" />\n        <TextField source=\"isDeleted\" />\n    </Datagrid>\n  </List>;\n\n\nconst FilterForm = \n    <SimpleForm>\n        <TextInput source=\"username\" />\n        <TextInput source=\"filter\" />\n    </SimpleForm>\nconst FilterEdit = props => <Edit {...props}>{FilterForm}</Edit>;\nconst FilterCreate = props => <Create {...props}>{FilterForm}</Create>;\n\nconst FilterList = props =>\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n        <TextField source=\"username\" />\n        <TextField source=\"filter\" />\n    </Datagrid>\n  </List>;\n\nconst TranslationForm = \n    <SimpleForm>\n        <TextInput source=\"key\" />\n        <LongTextInput source=\"content_en\" />\n        <LongTextInput source=\"content_de\" />\n    </SimpleForm>\nconst TranslationEdit = props => <Edit {...props}>{TranslationForm}</Edit>;\nconst TranslationCreate = props => <Create {...props}>{TranslationForm}</Create>;\n\n\nconst App = () => \n  <Admin dataProvider={dataProvider} authProvider={authProvider}>\n    <Resource name=\"entry\" list={EntryList} edit={EntryEdit} create={EntryCreate}/>\n    <Resource name=\"filter\" list={FilterList} edit={FilterEdit} create={FilterCreate}/>\n    <Resource name=\"translation\" list={ListGuesser} edit={TranslationEdit} create={TranslationCreate}/>\n  </Admin>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}